"""
Django settings for the 'webpeditor' project.

Generated by 'django-admin startproject'.
"""

import math
import os
from datetime import timedelta
from pathlib import Path
from typing import Any, Optional

from django.core.management.utils import get_random_secret_key
from django_stubs_ext import monkeypatch
from dotenv import load_dotenv

from webpeditor_app.apps import WebpeditorAppConfig

# Patching Django types. Allows running app with annotated types.
monkeypatch()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: Path = Path(__file__).resolve().parent.parent

DJANGO_ENVIRONMENT: Optional[str] = os.getenv("DJANGO_ENVIRONMENT")

IS_DEVELOPMENT: bool = DJANGO_ENVIRONMENT == "Development"
IS_STAGING: bool = DJANGO_ENVIRONMENT == "Staging"
IS_PRODUCTION: bool = DJANGO_ENVIRONMENT == "Production"

if IS_DEVELOPMENT:
    load_dotenv(dotenv_path=BASE_DIR / ".env.dev", override=True, verbose=True)
elif IS_STAGING:
    load_dotenv(dotenv_path=BASE_DIR / ".env", override=True, verbose=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = os.getenv("SECRET_KEY", default=get_random_secret_key())

WEBPEDITOR_SALT_KEY: str = str(os.getenv("WEBPEDITOR_SALT_KEY"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = True if IS_DEVELOPMENT else False

ALLOWED_HOSTS: list[str] = str(os.getenv("ALLOWED_HOSTS")).split(",")

CSRF_TRUSTED_ORIGINS: list[str] = str(os.getenv("CSRF_TRUSTED_ORIGINS")).split(",")

INSTALLED_APPS: list[str] = [
    "daphne",
    "django.contrib.admindocs",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django_extensions",
    "corsheaders",
    "compressor",
    "ninja_extra",
    "webpeditor_app",
    "anydi.ext.django",
]

ANYDI: dict[str, Any] = {
    "INJECT_URLCONF": "webpeditor.urls",
    "PATCH_NINJA": True,
    "REGISTER_COMPONENTS": True,
    "REGISTER_SETTINGS": True,
    "MODULES": [
        # Should follow the order. Synchronous dependency resolution
        "webpeditor_app.core.di.CoreModule",
        "webpeditor_app.infrastructure.di.InfrastructureModule",
        "webpeditor_app.application.di.ApplicationModule",
    ],
}

CORS_ORIGIN_WHITELIST: list[str] = str(os.getenv("CORS_ORIGIN_WHITELIST")).split(",")

MIDDLEWARE: list[str] = [
    "anydi.ext.django.middleware.request_scoped_middleware",
    "webpeditor_app.middlewares.error_handling.ErrorHandlingMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF: str = "webpeditor.urls"

TEMPLATES: list[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION: str = "webpeditor.asgi.application"

# Database

DATABASES: dict[str, Any] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}

# Path for future migrations
MIGRATION_MODULES: dict[str, str] = {"webpeditor_app": "webpeditor_app.infrastructure.database.migrations"}

# Password validation

AUTH_PASSWORD_VALIDATORS: list[dict[str, str]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization

LANGUAGE_CODE: str = "en-us"

TIME_ZONE: str = "UTC"

USE_I18N: bool = True

USE_TZ: bool = True

EMAIL_BACKEND: str = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = str(os.getenv("EMAIL_HOST"))
EMAIL_PORT = int(str(os.getenv("EMAIL_PORT", "587")))
EMAIL_USE_TLS = bool(int(str(os.getenv("EMAIL_USE_TLS", "1"))))
EMAIL_HOST_USER = str(os.getenv("EMAIL_HOST_USER"))
EMAIL_HOST_PASSWORD = str(os.getenv("EMAIL_HOST_PASSWORD"))
DEFAULT_FROM_EMAIL = str(os.getenv("DEFAULT_FROM_EMAIL"))

# Session handling
SESSION_ENGINE: str = "django.contrib.sessions.backends.db"
SESSION_SERIALIZER: str = "django.contrib.sessions.serializers.JSONSerializer"
SESSION_EXPIRE_AT_BROWSER_CLOSE: bool = True
SESSION_COOKIE_SAMESITE: str = "Strict"
SESSION_COOKIE_HTTPONLY: bool = True
SESSION_COOKIE_SECURE: bool = True
SESSION_COOKIE_AGE: int = math.ceil(timedelta(minutes=15).total_seconds())  # 15 minutes

# CSRF
CSRF_COOKIE_SAMESITE: str = "Strict"
CSRF_COOKIE_SECURE: bool = True
CSRF_COOKIE_AGE: int = math.ceil(timedelta(minutes=15).total_seconds())  # 15 minutes

# HSTS
SECURE_HSTS_SECONDS: int = math.ceil(timedelta(days=365 * 5).total_seconds())  # 5 years
SECURE_HSTS_INCLUDE_SUBDOMAINS: bool = True
SECURE_HSTS_PRELOAD: bool = True

# Additional security settings
SECURE_CONTENT_TYPE_NOSNIFF: bool = True
X_FRAME_OPTIONS: str = "SAMEORIGIN"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STORAGES: dict[str, dict[str, str]] = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

STATIC_URL: str = "static/"

STATIC_ROOT: Path = BASE_DIR / "static"

STATICFILES_FINDERS: list[str] = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

COMPRESS_ENABLED: bool = True if DEBUG else False

MEDIA_URL: str = "/"

# Cloudinary storage config
CLOUDINARY_BASE_URL: str = str(os.getenv("CLOUDINARY_BASE_URL"))
CLOUDINARY_CLOUD_NAME: str = str(os.getenv("CLOUDINARY_CLOUD_NAME"))
CLOUDINARY_API_KEY: str = str(os.getenv("CLOUDINARY_API_KEY"))
CLOUDINARY_API_SECRET: str = str(os.getenv("CLOUDINARY_API_SECRET"))

# Filename settings
FILENAME_MAX_SIZE: int = 255
RESERVED_WINDOWS_FILENAMES: list[str] = str(os.getenv("RESERVED_WINDOWS_FILENAMES")).split(",")

# Application definition
APP_VERSION: str = str(os.getenv("APP_VERSION"))
APP_VERBOSE_NAME: str = f"{str(WebpeditorAppConfig.verbose_name)} - V{APP_VERSION}"

# Logging configuration
# Override ninja-extra request logger format by configuring Django's 'django.request' logger.
LOGGING: dict[str, Any] = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "ninja_request": {
            "()": "webpeditor.logging_filters.ColorFormatter",
        },
    },
    "filters": {
        "ninja_request_message": {
            "()": "webpeditor.logging_filters.NinjaRequestMessageFilter",
        }
    },
    "handlers": {
        "console_ninja_request": {
            "class": "logging.StreamHandler",
            "formatter": "ninja_request",
            "filters": ["ninja_request_message"],
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["console_ninja_request"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
