"""
This type stub file was generated by pyright.
"""

from django.contrib.admin.forms import AdminAuthenticationForm
from django.contrib.admin.sites import AdminSite
from .forms import OTPAuthenticationFormMixin

def user_model_search_fields(field_names):  # -> tuple[list[Any], Any | str]:
    """
    Check whether the provided field names exist, and return a tuple of
    search fields and help text for the validated field names.

    Parameters:
    field_names (list of str): A list of field names to search for in the user model.

    Returns:
    tuple: A tuple containing:
        - search_fields (list of str): A list of search fields formatted for querying.
        - search_help_text (str): A help text string describing the valid search fields.
    """
    ...

class OTPAdminAuthenticationForm(AdminAuthenticationForm, OTPAuthenticationFormMixin):
    """
    An :class:`~django.contrib.admin.forms.AdminAuthenticationForm` subclass
    that solicits an OTP token. This has the same behavior as
    :class:`~django_otp.forms.OTPAuthenticationForm`.
    """

    otp_device = ...
    otp_token = ...
    otp_challenge = ...
    def clean(self):  # -> dict[str, Any]:
        ...

class OTPAdminSite(AdminSite):
    """
    This is an :class:`~django.contrib.admin.AdminSite` subclass that requires
    two-factor authentication. Only users that can be verified by a registered
    OTP device will be authorized for this admin site. Unverified users will be
    treated as if :attr:`~django.contrib.auth.models.User.is_staff` is
    ``False``.
    """

    name = ...
    login_form = OTPAdminAuthenticationForm
    login_template = ...
    def __init__(self, name=...) -> None: ...
    def has_permission(self, request):  # -> Literal[False]:
        """
        In addition to the default requirements, this only allows access to
        users who have been verified by a registered OTP device.
        """
        ...
