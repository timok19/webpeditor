"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

logger = ...
_NOT_SET = ...
class BaseSerializer:
    DEFAULT_ENCODING: Optional[str] = ...
    def __init__(self, *args: Any, encoding: Optional[str] = ..., **kwargs: Any) -> None:
        ...

    def dumps(self, value: Any) -> Any:
        ...

    def loads(self, value: Any) -> Any:
        ...



class NullSerializer(BaseSerializer):
    """
    This serializer does nothing. Its only recommended to be used by
    :class:`aiocache.SimpleMemoryCache` because for other backends it will
    produce incompatible data unless you work only with str types because it
    store data as is.

    DISCLAIMER: Be careful with mutable types and memory storage. The following
    behavior is considered normal (same as ``functools.lru_cache``)::

        cache = Cache()
        my_list = [1]
        await cache.set("key", my_list)
        my_list.append(2)
        await cache.get("key")  # Will return [1, 2]
    """
    def dumps(self, value: Any) -> Any:
        """
        Returns the same value
        """
        ...

    def loads(self, value: Any) -> Any:
        """
        Returns the same value
        """
        ...



class StringSerializer(BaseSerializer):
    """
    Converts all input values to str. All return values are also str. Be
    careful because this means that if you store an ``int(1)``, you will get
    back '1'.

    The transformation is done by just casting to str in the ``dumps`` method.

    If you want to keep python types, use ``PickleSerializer``. ``JsonSerializer``
    may also be useful to keep type of symple python types.
    """
    def dumps(self, value: Any) -> str:
        """
        Serialize the received value casting it to str.

        :param value: obj Anything support cast to str
        :returns: str
        """
        ...

    def loads(self, value: Any) -> str:
        """
        Returns value back without transformations
        """
        ...



class PickleSerializer(BaseSerializer):
    """
    Transform data to bytes using pickle.dumps and pickle.loads to retrieve it back.
    """
    DEFAULT_ENCODING = ...
    def __init__(self, *args: Any, protocol: Optional[int] = ..., **kwargs: Any) -> None:
        ...

    def dumps(self, value: Any) -> bytes:
        """
        Serialize the received value using ``pickle.dumps``.

        :param value: obj
        :returns: bytes
        """
        ...

    def loads(self, value: Optional[bytes]) -> Any:
        """
        Deserialize value using ``pickle.loads``.

        :param value: bytes
        :returns: obj
        """
        ...



class JsonSerializer(BaseSerializer):
    """
    Transform data to json string with json.dumps and json.loads to retrieve it back. Check
    https://docs.python.org/3/library/json.html#py-to-json-table for how types are converted.

    ujson will be used by default if available. Be careful with differences between built in
    json module and ujson:
        - ujson dumps supports bytes while json doesn't
        - ujson and json outputs may differ sometimes
    """
    def dumps(self, value: Any) -> str:
        """
        Serialize the received value using ``json.dumps``.

        :param value: dict
        :returns: str
        """
        ...

    def loads(self, value: Optional[str]) -> Any:
        """
        Deserialize value using ``json.loads``.

        :param value: str
        :returns: output of ``json.loads``.
        """
        ...



class MsgPackSerializer(BaseSerializer):
    """
    Transform data to bytes using msgpack.dumps and msgpack.loads to retrieve it back. You need
    to have ``msgpack`` installed in order to be able to use this serializer.

    :param encoding: str. Can be used to change encoding param for ``msg.loads`` method.
        Default is utf-8.
    :param use_list: bool. Can be used to change use_list param for ``msgpack.loads`` method.
        Default is True.
    """
    def __init__(self, *args: Any, use_list: bool = ..., **kwargs: Any) -> None:
        ...

    def dumps(self, value: Any) -> bytes:
        """
        Serialize the received value using ``msgpack.dumps``.

        :param value: obj
        :returns: bytes
        """
        ...

    def loads(self, value: Optional[bytes]) -> Any:
        """
        Deserialize value using ``msgpack.loads``.

        :param value: bytes
        :returns: obj
        """
        ...
