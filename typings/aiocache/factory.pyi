"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Mapping, MutableMapping, Type
from aiocache.base import BaseCache
from aiocache import AIOCACHE_CACHES

logger = ...
class Cache:
    """
    This class is just a proxy to the specific cache implementations like
    :class:`aiocache.SimpleMemoryCache`, :class:`aiocache.RedisCache` and
    :class:`aiocache.MemcachedCache`. It is the preferred method of
    instantiating new caches over using the backend specific classes.

    You can instatiate a new one using the ``cache_type`` attribute like:

    >>> from aiocache import Cache
    >>> Cache(Cache.REDIS)
    RedisCache (127.0.0.1:6379)

    If you don't specify anything, ``Cache.MEMORY`` is used.

    Only ``Cache.MEMORY``, ``Cache.REDIS`` and ``Cache.MEMCACHED`` types
    are allowed. If the type passed is invalid, it will raise a
    :class:`aiocache.exceptions.InvalidCacheType` exception.
    """
    MEMORY = AIOCACHE_CACHES["memory"]
    REDIS = ...
    MEMCACHED = ...
    def __new__(cls, cache_class: Type[BaseCache] = ..., **kwargs: Any) -> BaseCache:
        ...

    @classmethod
    def get_scheme_class(cls, scheme: str) -> type[BaseCache]:
        ...

    @classmethod
    def from_url(cls, url: str) -> BaseCache:
        """
        Given a resource uri, return an instance of that cache initialized with the given
        parameters. An example usage:

        >>> from aiocache import Cache
        >>> Cache.from_url('memory://')
        <aiocache.backends.memory.SimpleMemoryCache object at 0x1081dbb00>

        a more advanced usage using queryparams to configure the cache:

        >>> from aiocache import Cache
        >>> cache = Cache.from_url('redis://localhost:10/1?pool_max_size=1')
        >>> cache
        RedisCache (localhost:10)
        >>> cache.db
        1
        >>> cache.pool_max_size
        1

        :param url: string identifying the resource uri of the cache to connect to
        """
        ...



class CacheHandler:
    _config: Dict[str, Dict[str, object]] = ...
    def __init__(self) -> None:
        ...

    def add(self, alias: str, config: Dict[str, object]) -> None:
        """
        Add a cache to the current config. If the key already exists, it
        will overwrite it::

            >>> caches.add('default', {
                    'cache': "aiocache.SimpleMemoryCache",
                    'serializer': {
                        'class': "aiocache.serializers.StringSerializer"
                    }
                })

        :param alias: The alias for the cache
        :param config: Mapping containing the cache configuration
        """
        ...

    def get(self, alias: str) -> BaseCache:
        """
        Retrieve cache identified by alias. Will return always the same instance

        If the cache was not instantiated yet, it will do it lazily the first time
        this is called.

        :param alias: str cache alias
        :return: cache instance
        """
        ...

    def create(self, alias: str, **kwargs: Any) -> BaseCache:
        """Create a new cache.

        You can use kwargs to pass extra parameters to configure the cache.

        :param alias: alias to pull configuration from
        :return: New cache instance
        """
        ...

    def get_alias_config(self, alias: str) -> Dict[str, object]:
        ...

    def get_config(self) -> Dict[str, Dict[str, object]]:
        """
        Return copy of current stored config
        """
        ...

    def set_config(self, config: Dict[str, Dict[str, object]]) -> None:
        """
        Set (override) the default config for cache aliases from a dict-like structure.
        The structure is the following::

            {
                'default': {
                    'cache': "aiocache.SimpleMemoryCache",
                    'serializer': {
                        'class': "aiocache.serializers.StringSerializer"
                    }
                },
                'redis_alt': {
                    'cache': "aiocache.RedisCache",
                    'endpoint': "127.0.0.10",
                    'port': 6378,
                    'serializer': {
                        'class': "aiocache.serializers.PickleSerializer"
                    },
                    'plugins': [
                        {'class': "aiocache.plugins.HitMissRatioPlugin"},
                        {'class': "aiocache.plugins.TimingPlugin"}
                    ]
                }
            }

        'default' key must always exist when passing a new config. Default configuration
        is::

            {
                'default': {
                    'cache': "aiocache.SimpleMemoryCache",
                    'serializer': {
                        'class': "aiocache.serializers.StringSerializer"
                    }
                }
            }

        You can set your own classes there.
        The class params accept both str and class types.

        All keys in the config are optional, if they are not passed the defaults
        for the specified class will be used.

        If a config key already exists, it will be updated with the new values.
        """
        ...



caches = ...
