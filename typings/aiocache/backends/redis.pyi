"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional
from aiocache.base import BaseCache

_NOT_SET = ...

class RedisBackend(BaseCache):
    RELEASE_SCRIPT = ...
    CAS_SCRIPT = ...
    def __init__(
        self,
        endpoint: str = ...,
        port: int = ...,
        db: int = ...,
        password: Optional[str] = ...,
        pool_min_size: Optional[int] = ...,
        pool_max_size: Optional[int] = ...,
        create_connection_timeout: Optional[float] = ...,
        ssl: bool = ...,
        connection_pool_class: Any = ...,
        connection_pool_kwargs: Optional[Dict[str, Any]] = ...,
        **kwargs: Any,
    ) -> None: ...

class RedisCache(RedisBackend):
    """
    Redis cache implementation with the following components as defaults:
        - serializer: :class:`aiocache.serializers.JsonSerializer`
        - plugins: []

    Config options are:

    :param serializer: obj derived from :class:`aiocache.serializers.BaseSerializer`.
    :param plugins: list of :class:`aiocache.plugins.BasePlugin` derived classes.
    :param namespace: string to use as default prefix for the key used in all operations of
        the backend. Default is None.
    :param timeout: int or float in seconds specifying maximum timeout for the operations to last.
        By default its 5.
    :param endpoint: str with the endpoint to connect to. Default is "127.0.0.1".
    :param port: int with the port to connect to. Default is 6379.
    :param db: int indicating database to use. Default is 0.
    :param password: str indicating password to use. Default is None.
    :param pool_max_size: int maximum pool size for the redis connections pool. Default is None.
    :param create_connection_timeout: int timeout for the creation of connection. Default is None
    """

    NAME: str = ...
    def __init__(self, serializer: Any = ..., **kwargs: Any) -> None: ...
    @classmethod
    def parse_uri_path(cls, path: str) -> Dict[str, Any]:
        """
        Given a uri path, return the Redis specific configuration
        options in that path string according to iana definition
        http://www.iana.org/assignments/uri-schemes/prov/redis

        :param path: string containing the path. Example: "/0"
        :return: mapping containing the options. Example: {"db": "0"}
        """
        ...

    def __repr__(self) -> str: ...
