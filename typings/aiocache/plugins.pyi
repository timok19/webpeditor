"""
This type stub file was generated by pyright.
"""

from typing import Any, Awaitable, Callable, Iterable, Sequence
from aiocache.base import BaseCache

"""
This module implements different plugins you can attach to your cache instance. They
are coded in a collaborative so you can use multiple inheritance.
"""
class BasePlugin:
    @classmethod
    def add_hook(cls, func: Callable[..., Awaitable[Any]], hooks: Sequence[str]) -> None:
        ...

    async def do_nothing(self, *args: Any, **kwargs: Any) -> None:
        ...



class TimingPlugin(BasePlugin):
    """
    Calculates average, min and max times each command takes. The data is saved
    in the cache class as a dict attribute called ``profiling``. For example, to
    access the average time of the operation get, you can do ``cache.profiling['get_avg']``
    """
    @classmethod
    def save_time(cls, method: Callable[..., Awaitable[Any]]) -> Callable[..., Awaitable[None]]:
        ...



class HitMissRatioPlugin(BasePlugin):
    """
    Calculates the ratio of hits the cache has. The data is saved in the cache class as a dict
    attribute called ``hit_miss_ratio``. For example, to access the hit ratio of the cache,
    you can do ``cache.hit_miss_ratio['hit_ratio']``. It also provides the "total" and "hits"
    keys.
    """
    async def post_get(self, client: BaseCache, key: str, took: float = ..., ret: Any = ..., **kwargs: Any) -> None:
        ...

    async def post_multi_get(self, client: BaseCache, keys: Sequence[str], took: float = ..., ret: Sequence[Any] = ..., **kwargs: Any) -> None:
        ...
