"""
This type stub file was generated by pyright.
"""

import re
import string
import uuid
import shortuuid
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.db.models import CharField, DateTimeField, Q, SlugField, UniqueConstraint
from django.db.models.constants import LOOKUP_SEP
from django.template.defaultfilters import slugify
from django.utils.crypto import get_random_string
from django.utils.encoding import force_str

"""
Django Extensions additional model fields

Some fields might require additional dependencies to be installed.
"""
HAS_UUID = ...
HAS_SHORT_UUID = ...
MAX_UNIQUE_QUERY_ATTEMPTS = ...
class UniqueFieldMixin:
    def check_is_bool(self, attrname): # -> None:
        ...

    def get_queryset(self, model_cls, slug_field):
        ...

    def find_unique(self, model_instance, field, iterator, *args):
        ...



class AutoSlugField(UniqueFieldMixin, SlugField):
    """
    AutoSlugField

    By default, sets editable=False, blank=True.

    Required arguments:

    populate_from
        Specifies which field, list of fields, or model method
        the slug will be populated from.

        populate_from can traverse a ForeignKey relationship
        by using Django ORM syntax:
            populate_from = 'related_model__field'

    Optional arguments:

    separator
        Defines the used separator (default: '-')

    overwrite
        If set to True, overwrites the slug on every save (default: False)

    slugify_function
        Defines the function which will be used to "slugify" a content
        (default: :py:func:`~django.template.defaultfilters.slugify` )

    It is possible to provide custom "slugify" function with
    the ``slugify_function`` function in a model class.

    ``slugify_function`` function in a model class takes priority over
    ``slugify_function`` given as an argument to :py:class:`~AutoSlugField`.

    Example

    .. code-block:: python

        # models.py

        from django.db import models

        from django_extensions.db.fields import AutoSlugField


        class MyModel(models.Model):
            def slugify_function(self, content):
                return content.replace('_', '-').lower()

            title = models.CharField(max_length=42)
            slug = AutoSlugField(populate_from='title')

    Inspired by SmileyChris' Unique Slugify snippet:
    https://www.djangosnippets.org/snippets/690/
    """
    def __init__(self, *args, **kwargs) -> None:
        ...

    @staticmethod
    def slugify_func(content, slugify_function): # -> Literal['']:
        ...

    def slug_generator(self, original_slug, start): # -> Generator[Any | str, Any, Never]:
        ...

    def create_slug(self, model_instance, add): # -> Any | str:
        ...

    def get_slug_fields(self, model_instance, lookup_value): # -> str | Any:
        ...

    def pre_save(self, model_instance, add): # -> str:
        ...

    def get_internal_type(self): # -> Literal['SlugField']:
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...



class RandomCharField(UniqueFieldMixin, CharField):
    """
    RandomCharField

    By default, sets editable=False, blank=True, unique=False.

    Required arguments:

    length
        Specifies the length of the field

    Optional arguments:

    unique
        If set to True, duplicate entries are not allowed (default: False)

    lowercase
        If set to True, lowercase the alpha characters (default: False)

    uppercase
        If set to True, uppercase the alpha characters (default: False)

    include_alpha
        If set to True, include alpha characters (default: True)

    include_digits
        If set to True, include digit characters (default: True)

    include_punctuation
        If set to True, include punctuation characters (default: False)

    keep_default
        If set to True, keeps the default initialization value (default: False)
    """
    def __init__(self, *args, **kwargs) -> None:
        ...

    def random_char_generator(self, chars): # -> Generator[str, Any, Never]:
        ...

    def in_unique_together(self, model_instance): # -> bool:
        ...

    def pre_save(self, model_instance, add): # -> Any | str:
        ...

    def internal_type(self): # -> Literal['CharField']:
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...



class CreationDateTimeField(DateTimeField):
    """
    CreationDateTimeField

    By default, sets editable=False, blank=True, auto_now_add=True
    """
    def __init__(self, *args, **kwargs) -> None:
        ...

    def get_internal_type(self): # -> Literal['DateTimeField']:
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...



class ModificationDateTimeField(CreationDateTimeField):
    """
    ModificationDateTimeField

    By default, sets editable=False, blank=True, auto_now=True

    Sets value to now every time the object is saved.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...

    def get_internal_type(self): # -> Literal['DateTimeField']:
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...

    def pre_save(self, model_instance, add): # -> Any:
        ...



class UUIDVersionError(Exception):
    ...


class UUIDFieldMixin:
    """
    UUIDFieldMixin

    By default uses UUID version 4 (randomly generated UUID).

    The field support all uuid versions which are natively supported by the uuid python module, except version 2.
    For more information see: https://docs.python.org/lib/module-uuid.html
    """
    DEFAULT_MAX_LENGTH = ...
    def __init__(self, verbose_name=..., name=..., auto=..., version=..., node=..., clock_seq=..., namespace=..., uuid_name=..., *args, **kwargs) -> None:
        ...

    def create_uuid(self): # -> UUID:
        ...

    def pre_save(self, model_instance, add): # -> str:
        ...

    def formfield(self, **kwargs): # -> None:
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...



class ShortUUIDField(UUIDFieldMixin, CharField):
    """
    ShortUUIDFied

    Generates concise (22 characters instead of 36), unambiguous, URL-safe UUIDs.

    Based on `shortuuid`: https://github.com/stochastic-technologies/shortuuid
    """
    DEFAULT_MAX_LENGTH = ...
    def __init__(self, *args, **kwargs) -> None:
        ...

    def create_uuid(self): # -> str:
        ...
