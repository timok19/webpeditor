"""
This type stub file was generated by pyright.
"""

from django.db import models

"""
JSONField automatically serializes most Python terms to JSON data.
Creates a TEXT field with a default value of "{}".  See test_json.py for
more information.

 from django.db import models
 from django_extensions.db.fields import json

 class LOL(models.Model):
     extra = json.JSONField()
"""
def dumps(value): # -> str:
    ...

def loads(txt): # -> Any:
    ...

class JSONDict(dict):
    """
    Hack so repr() called by dumpdata will output JSON instead of
    Python formatted data.  This way fixtures will work!
    """
    def __repr__(self): # -> str:
        ...



class JSONList(list):
    """
    Hack so repr() called by dumpdata will output JSON instead of
    Python formatted data.  This way fixtures will work!
    """
    def __repr__(self): # -> str:
        ...



class JSONField(models.TextField):
    """
    JSONField is a generic textfield that neatly serializes/unserializes
    JSON objects seamlessly.  Main thingy must be a dict object.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...

    def get_default(self): # -> dict[Any, Any] | JSONDict | JSONList | Any:
        ...

    def to_python(self, value): # -> dict[Any, Any] | JSONDict | JSONList | Any:
        """Convert our string value to JSON after we load it from the DB"""
        ...

    def get_prep_value(self, value): # -> str | Any:
        ...

    def from_db_value(self, value, expression, connection): # -> dict[Any, Any] | JSONDict | JSONList | Any:
        ...

    def get_db_prep_save(self, value, connection, **kwargs): # -> str | None:
        """Convert our JSON object to a string before we save"""
        ...

    def deconstruct(self): # -> tuple[Any, Any, Any, Any]:
        ...
