"""
This type stub file was generated by pyright.
"""

from django.db import models

CLOUDINARY_FIELD_DB_RE = ...
def with_metaclass(meta, *bases): # -> metaclass:
    """
    Create a base class with a metaclass.

    This requires a bit of explanation: the basic idea is to make a dummy
    metaclass for one level of class instantiation that replaces itself with
    the actual metaclass.

    Taken from six - https://pythonhosted.org/six/
    """
    class metaclass(meta):
        ...



class CloudinaryField(models.Field):
    description = ...
    def __init__(self, *args, **kwargs) -> None:
        ...

    def get_internal_type(self): # -> Literal['CharField']:
        ...

    def value_to_string(self, obj): # -> Any:
        """
        We need to support both legacy `_get_val_from_obj` and new `value_from_object` models.Field methods.
        It would be better to wrap it with try -> except AttributeError -> fallback to legacy.
        Unfortunately, we can catch AttributeError exception from `value_from_object` function itself.
        Parsing exception string is an overkill here, that's why we check for attribute existence

        :param obj: Value to serialize

        :return: Serialized value
        """
        ...

    def parse_cloudinary_resource(self, value): # -> CloudinaryResource:
        ...

    def from_db_value(self, value, expression, connection, *args, **kwargs): # -> CloudinaryResource | None:
        ...

    def to_python(self, value): # -> CloudinaryResource | UploadedFile | Any | Literal[False]:
        ...

    def pre_save(self, model_instance, add): # -> Any:
        ...

    def get_prep_value(self, value): # -> Any:
        ...

    def formfield(self, **kwargs): # -> Field | None:
        ...
