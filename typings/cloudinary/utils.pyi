"""
This type stub file was generated by pyright.
"""

VAR_NAME_RE = ...
urlencode = ...
unquote = ...
SHARED_CDN = ...
DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION = ...
RANGE_VALUE_RE = ...
RANGE_RE = ...
FLOAT_RE = ...
REMOTE_URL_RE = ...
__LAYER_KEYWORD_PARAMS = ...
__URL_KEYS = ...
__SIMPLE_UPLOAD_PARAMS = ...
__SERIALIZED_UPLOAD_PARAMS = ...
upload_params = ...
_SIMPLE_TRANSFORMATION_PARAMS = ...
SHORT_URL_SIGNATURE_LENGTH = ...
LONG_URL_SIGNATURE_LENGTH = ...
SIGNATURE_SHA1 = ...
SIGNATURE_SHA256 = ...
signature_algorithms = ...

def compute_hex_hash(s, algorithm=...):  # -> str:
    """
    Computes string hash using specified algorithm and return HEX string representation of hash.

    :param s:         String to compute hash for
    :param algorithm: The name of algorithm to use for computing hash

    :return: HEX string of computed hash value
    """
    ...

def build_array(arg):  # -> list[Any] | tuple[Any, ...]:
    ...
def build_list_of_dicts(val):  # -> list[Any] | list[dict[Any, Any]] | Any:
    """
    Converts a value that can be presented as a list of dict.

    In case top level item is not a list, it is wrapped with a list

    Valid values examples:
        - Valid dict: {"k": "v", "k2","v2"}
        - List of dict: [{"k": "v"}, {"k2","v2"}]
        - JSON decodable string: '{"k": "v"}', or '[{"k": "v"}]'
        - List of JSON decodable strings: ['{"k": "v"}', '{"k2","v2"}']

    Invalid values examples:
        - ["not", "a", "dict"]
        - [123, None],
        - [["another", "list"]]

    :param val: Input value
    :type val: Union[list, dict, str]

    :return: Converted(or original) list of dict
    :raises: ValueError in case value cannot be converted to a list of dict
    """
    ...

def encode_double_array(array):  # -> str:
    ...
def encode_dict(arg):  # -> LiteralString:
    ...
def normalize_context_value(value):  # -> str:
    """
    Escape "=" and "|" delimiter characters and json encode lists

    :param value: Value to escape
    :type value: int or str or list or tuple

    :return: The normalized value
    :rtype: str
    """
    ...

def encode_context(context):  # -> str:
    """
    Encode metadata fields based on incoming value.

    List and tuple values are encoded to json strings.

    :param context: dict of context to be encoded

    :return: a joined string of all keys and values properly escaped and separated by a pipe character
    """
    ...

def json_encode(value, sort_keys=...):  # -> str:
    """
    Converts value to a json encoded string

    :param value: value to be encoded
    :param sort_keys: whether to sort keys

    :return: JSON encoded string
    """
    ...

def encode_date_to_usage_api_format(date_obj):
    """
    Encodes date object to `dd-mm-yyyy` format string

    :param date_obj: datetime.date object to encode

    :return: Encoded date as a string
    """
    ...

def patch_fetch_format(options):  # -> None:
    """
    When upload type is fetch, remove the format options.
    In addition, set the fetch_format options to the format value unless it was already set.
    Mutates the "options" parameter!

    :param options: URL and transformation options
    """
    ...

def generate_transformation_string(**options):  # -> tuple[LiteralString, dict[str, Any]]:
    ...
def chain_transformations(options, transformations):  # -> dict[str, Any]:
    """
    Helper function, allows chaining transformations to the end of transformations list

    The result of this function is an updated options parameter

    :param options:         Original options
    :param transformations: Transformations to chain at the end

    :return: Resulting options
    """
    ...

def is_fraction(width):  # -> bool | None:
    ...
def split_range(range):  # -> list[Any] | list[str] | None:
    ...
def norm_range_value(value):  # -> str | Any | None:
    ...
def norm_auto_range_value(value):  # -> str | Any | None:
    ...
def process_video_codec_param(param): ...
def process_radius(param):  # -> str | None:
    ...
def process_params(params):  # -> dict[Any, Any] | None:
    ...
def cleanup_params(params):  # -> dict[Any, Any | Literal['1', '0']]:
    """
    Cleans and normalizes parameters when calculating signature in Upload API.

    :param params:
    :return:
    """
    ...

def normalize_params(params):  # -> dict[Any, Any | Literal['true', 'false']]:
    """
    Normalizes Admin API parameters.

    :param params:
    :return:
    """
    ...

def sign_request(params, options):  # -> dict[Any, Any | Literal['1', '0']]:
    ...
def api_sign_request(params_to_sign, api_secret, algorithm=...):  # -> str:
    ...
def breakpoint_settings_mapper(breakpoint_settings): ...
def generate_responsive_breakpoints_string(breakpoints):  # -> str | None:
    ...
def finalize_source(source, format, url_suffix):  # -> tuple[str | Any, str | Any]:
    ...
def finalize_resource_type(
    resource_type, type, url_suffix, use_root_path, shorten
):  # -> tuple[Any | Literal['iu', 'images', 'files', 'image'] | None, Any | Literal['upload'] | None]:
    ...
def unsigned_download_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution):  # -> str:
    """cdn_subdomain and secure_cdn_subdomain
    1) Customers in shared distribution (e.g. res.cloudinary.com)
      if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.
      Setting secure_cdn_subdomain to false disables this for https.
    2) Customers with private cdn
      if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http
      if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https
      (please contact support if you require this)
    3) Customers with cname
      if cdn_domain is true uses a[1-5].cname for http. For https, uses the same naming scheme
      as 1 for shared distribution and as 2 for private distribution."""
    ...

def build_distribution_domain(options):  # -> str:
    ...
def merge(*dict_args):  # -> None:
    ...
def cloudinary_url(source, **options):  # -> tuple[Any, dict[str, Any]] | tuple[LiteralString, dict[str, Any]]:
    ...
def base_api_url(path, **options):  # -> LiteralString | str:
    ...
def cloudinary_api_url(action=..., **options):  # -> LiteralString | str:
    ...
def cloudinary_api_download_url(action, params, **options):  # -> str:
    ...
def cloudinary_scaled_url(source, width, transformation, options):  # -> LiteralString:
    """
    Generates a cloudinary url scaled to specified width.

    :param source:          The resource
    :param width:           Width in pixels of the srcset item
    :param transformation:  Custom transformation that overrides transformations provided in options
    :param options:         A dict with additional options

    :return: Resulting URL of the item
    """
    ...

def smart_escape(source, unsafe=...):  # -> str:
    """
    Based on ruby's CGI::unescape. In addition does not escape / :

    :param source: Source string to escape
    :param unsafe: Unsafe characters

    :return: Escaped string
    """
    ...

def random_public_id():  # -> str:
    ...
def signed_preloaded_image(result): ...
def now():  # -> str:
    ...
def private_download_url(public_id, format, **options):  # -> str:
    ...
def zip_download_url(tag, **options):  # -> str:
    ...
def bracketize_seq(params):  # -> dict[Any, Any]:
    ...
def download_archive_url(**options):  # -> str:
    ...
def download_zip_url(**options):  # -> str:
    ...
def download_folder(folder_path, **options):  # -> str:
    """
    Creates and returns a URL that when invoked creates an archive of a folder.
    :param folder_path: The full path from the root that is used to generate download url.
    :type folder_path:  str
    :param options:     Additional options.
    :type options:      dict, optional
    :return:            Signed URL to download the folder.
    :rtype:             str
    """
    ...

def download_backedup_asset(asset_id, version_id, **options):  # -> str:
    """
    The returned url allows downloading the backedup asset based on the the asset ID and the version ID.

    Parameters asset_id and version_id are returned with api.resource(<PUBLIC_ID1>, versions=True) API call.

    :param  asset_id:   The asset ID of the asset.
    :type   asset_id:   str
    :param  version_id: The version ID of the asset.
    :type   version_id: str
    :param  options:    Additional options.
    :type   options:    dict, optional
    :return:The signed URL for downloading backup version of the asset.
    :rtype: str
    """
    ...

def generate_auth_token(**options): ...
def archive_params(**options):  # -> dict[str, Any]:
    ...
def build_eager(transformations):  # -> str | None:
    ...
def build_single_eager(options):  # -> str | LiteralString:
    """
    Builds a single eager transformation which consists of transformation and (optionally) format joined by "/"

    :param options: Options containing transformation parameters and (optionally) a "format" key
        format can be a string value (jpg, gif, etc) or can be set to "" (empty string).
        The latter leads to transformation ending with "/", which means "No extension, use original format"
        If format is not provided or set to None, only transformation is used (without the trailing "/")

    :return: Resulting eager transformation string
    """
    ...

def build_custom_headers(headers):  # -> LiteralString | None:
    ...
def build_upload_params(**options):  # -> dict[str, Any | None]:
    ...
def handle_file_parameter(file, filename):  # -> tuple[Any | str, bytes | str | object | Any] | bytes | str | object | None:
    ...
def build_multi_and_sprite_params(**options):  # -> dict[str, Any]:
    """
    Build params for multi, download_multi, generate_sprite, and download_generated_sprite methods
    """
    ...

def process_layer(layer, layer_parameter): ...

IF_OPERATORS = ...
PREDEFINED_VARS = ...
replaceRE = ...

def translate_if(match):  # -> str:
    ...
def process_custom_function(custom_function): ...
def process_custom_pre_function(custom_function):  # -> str | None:
    ...
def process_fps(fps):  # -> str:
    """
    Serializes fps transformation parameter

    :param fps: A single number, a list of mixed type, a string, including open-ended and closed range values
                Examples: '24-29.97', 24, 24.973, '-24', [24, 29.97]

    :return: string
    """
    ...

def process_ki(ki):  # -> str | None:
    """
    Serializes keyframe_interval parameter
    :param ki: Keyframe interval. Should be either a string or a positive real number.
    :return: string
    """
    ...

def process_conditional(conditional):  # -> str:
    ...
def normalize_expression(expression):  # -> str:
    ...
def html_attrs(attrs, only=...): ...
def base64_encode_url(url):  # -> str:
    """
    Returns the Base64-decoded version of url.
    The method tries to unquote the url because quoting it

    :param str url:
        the url to encode. the value is URIdecoded and then
        re-encoded before converting to base64 representation

    """
    ...

def base64url_encode(data):  # -> str:
    """
    Url safe version of urlsafe_b64encode with stripped `=` sign at the end.

    :param data: input data

    :return: Base64 URL safe encoded string
    """
    ...

def encode_unicode_url(url_str):
    """
    Quote and encode possible unicode url string (applicable for python2)

    :param url_str: Url string to encode

    :return: Encoded string
    """
    ...

def is_remote_url(file):  # -> Match[str] | Literal[False] | None:
    """Basic URL scheme check to define if it's remote URL"""
    ...

def file_io_size(file_io):
    """
    Helper function for getting file-like object size(suitable for both files and streams)

    :param file_io: io.IOBase

    :return: size
    """
    ...

def check_property_enabled(f):  # -> Callable[..., Any | None]:
    """
    Used as a class method decorator to check whether class is enabled(self.enabled is True)

    :param f: function to call

    :return: None if not enabled, otherwise calls function f
    """
    ...

def verify_api_response_signature(public_id, version, signature, algorithm=...):
    """
    Verifies the authenticity of an API response signature

    :param public_id: The public id of the asset as returned in the API response
    :param version:   The version of the asset as returned in the API response
    :param signature: Actual signature. Can be retrieved from the X-Cld-Signature header
    :param algorithm: Name of hashing algorithm to use for calculation of HMACs.
                      By default uses `cloudinary.config().signature_algorithm`

    :return: Boolean result of the validation
    """
    ...

def verify_notification_signature(body, timestamp, signature, valid_for=..., algorithm=...):  # -> Literal[False]:
    """
    Verifies the authenticity of a notification signature

    :param body: Json of the request's body
    :param timestamp: Unix timestamp. Can be retrieved from the X-Cld-Timestamp header
    :param signature: Actual signature. Can be retrieved from the X-Cld-Signature header
    :param valid_for: The desired time in seconds for considering the request valid
    :param algorithm: Name of hashing algorithm to use for calculation of HMACs.
                      By default uses `cloudinary.config().signature_algorithm`

    :return: Boolean result of the validation
    """
    ...

def get_http_connector(conf, options):  # -> ProxyManager | TCPKeepAliveProxyManager | PoolManager | TCPKeepAlivePoolManager:
    """
    Used to create http connector, depends on api_proxy and disable_tcp_keep_alive configuration parameters.

    :param conf: configuration object
    :param options: additional options

    :return: ProxyManager if api_proxy is set, otherwise PoolManager object
    """
    ...

def encode_list(obj):  # -> LiteralString:
    ...
def safe_cast(val, casting_fn, default=...):  # -> None:
    """
    Attempts to cast a value to another using a given casting function
    Will return a default value if casting fails (configurable, defaults to None)

    :param val: The value to cast
    :param casting_fn: The casting function that will receive the value to cast
    :param default: The return value if casting fails

    :return: Result of casting the value or the value of the default parameter
    """
    ...

def unique(collection, key=...):  # -> list[Any]:
    """
    Removes duplicates from collection using key function

    :param collection: The collection to remove duplicates from
    :param key: The function to generate key from each element. If not passed, identity function is used
    """
    ...

def fq_public_id(public_id, resource_type=..., type=...):  # -> str:
    """
    Returns the fully qualified public id of form resource_type/type/public_id.

    :param public_id: The public ID of the asset.
    :type public_id: str
    :param resource_type: The type of the asset. Defaults to "image".
    :type resource_type: str
    :param type: The upload type. Defaults to "upload".
    :type type: str

    :return:
    """
    ...
