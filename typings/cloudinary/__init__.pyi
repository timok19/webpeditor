"""
This type stub file was generated by pyright.
"""

import abc
import logging
import numbers
import os
import re
import certifi
from copy import deepcopy
from math import ceil
from six import add_metaclass, python_2_unicode_compatible
from cloudinary import utils
from cloudinary.exceptions import GeneralError
from cloudinary.cache import responsive_breakpoints_cache
from cloudinary.http_client import HttpClient
from cloudinary.compat import parse_qs, urlparse
from platform import platform, python_version
from cloudinary.search import Search
from cloudinary.search_folders import SearchFolders

logger = ...
ch = ...
formatter = ...
CERT_KWARGS = ...
CF_SHARED_CDN = ...
OLD_AKAMAI_SHARED_CDN = ...
AKAMAI_SHARED_CDN = ...
SHARED_CDN = ...
CL_BLANK = ...
URI_SCHEME = ...
API_VERSION = ...
VERSION = ...
_USER_PLATFORM_DETAILS = ...
USER_AGENT = ...
USER_PLATFORM = ...

def get_user_agent():  # -> str:
    """
    Provides the `USER_AGENT` string that is passed to the Cloudinary servers.
    Prepends  `USER_PLATFORM` if it is defined.

    :returns: the user agent
    :rtype: str
    """
    ...

def import_django_settings():  # -> Any | None:
    ...
@add_metaclass(abc.ABCMeta)
class BaseConfig:
    def __init__(self) -> None: ...
    def __getattr__(self, i):  # -> Any | None:
        ...
    def update(self, **keywords):  # -> None:
        ...

class Config(BaseConfig):
    def __init__(self) -> None: ...

_config = ...

def config(**keywords):  # -> Config:
    ...
def reset_config():  # -> None:
    ...

_http_client = ...

@python_2_unicode_compatible
class CloudinaryResource:
    """
    Recommended sources for video tag
    """

    default_video_sources = ...
    def __init__(
        self,
        public_id=...,
        format=...,
        version=...,
        signature=...,
        url_options=...,
        metadata=...,
        type=...,
        resource_type=...,
        default_resource_type=...,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self):  # -> int:
        ...
    def validate(self): ...
    def get_prep_value(self):  # -> None:
        ...
    def get_presigned(self): ...
    def get_expected_signature(self):  # -> str:
        ...
    @property
    def url(self):  # -> LiteralString:
        ...
    def build_url(self, **options):  # -> LiteralString:
        ...
    @staticmethod
    def default_poster_options(options):  # -> None:
        ...
    @staticmethod
    def default_source_types():  # -> list[str]:
        ...
    def image(self, **options):  # -> str:
        """
        Generates HTML img tag

        :param options: Additional options

        :return: Resulting img tag
        """
        ...

    def video_thumbnail(self, **options):  # -> LiteralString:
        ...
    def video(self, **options):  # -> str:
        """
        Creates an HTML video tag for the provided +source+

        Examples:
           CloudinaryResource("mymovie.mp4").video()
           CloudinaryResource("mymovie.mp4").video(source_types = 'webm')
           CloudinaryResource("mymovie.ogv").video(poster = "myspecialplaceholder.jpg")
           CloudinaryResource("mymovie.webm").video(source_types = ['webm', 'mp4'], poster = {'effect': 'sepia'})

        :param options:
         * <tt>source_types</tt>            - Specify which source type the tag should include.
                                              defaults to webm, mp4 and ogv.
         * <tt>sources</tt>                 - Similar to source_types, but may contain codecs list.
                                              source_types and sources are mutually exclusive, only one of
                                              them can be used. If both are not provided, default source types
                                              are used.
         * <tt>source_transformation</tt>   - specific transformations to use
                                              for a specific source type.
         * <tt>poster</tt>                  - override default thumbnail:
           * url: provide an ad hoc url
           * options: with specific poster transformations and/or Cloudinary +:public_id+

        :return: Video tag
        """
        ...

    def source(self, **options):  # -> str:
        ...
    def picture(self, **options):  # -> LiteralString:
        ...

class CloudinaryImage(CloudinaryResource):
    def __init__(self, public_id=..., **kwargs) -> None: ...

class CloudinaryVideo(CloudinaryResource):
    def __init__(self, public_id=..., **kwargs) -> None: ...
