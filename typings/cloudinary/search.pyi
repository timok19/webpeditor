"""
This type stub file was generated by pyright.
"""

class Search:
    ASSETS = ...
    _endpoint = ...
    _KEYS_WITH_UNIQUE_VALUES = ...
    _ttl = ...
    def __init__(self) -> None: ...
    def expression(self, value):  # -> Self:
        """Specify the search query expression."""
        ...

    def max_results(self, value):  # -> Self:
        """Set the max results to return"""
        ...

    def next_cursor(self, value):  # -> Self:
        """Get next page in the query using the ``next_cursor`` value from a previous invocation."""
        ...

    def sort_by(self, field_name, direction=...):  # -> Self:
        """Add a field to sort results by. If not provided, direction is ``desc``."""
        ...

    def aggregate(self, value):  # -> Self:
        """Aggregate field."""
        ...

    def with_field(self, value):  # -> Self:
        """Request an additional field in the result set."""
        ...

    def fields(self, value):  # -> Self:
        """Request which fields to return in the result set."""
        ...

    def ttl(self, ttl):  # -> Self:
        """
        Sets the time to live of the search URL.

        :param ttl: The time to live in seconds.
        :return: self
        """
        ...

    def to_json(self):  # -> str:
        ...
    def execute(self, **options):  # -> Response:
        """Execute the search and return results."""
        ...

    def as_dict(self):  # -> dict[Any, Any]:
        ...
    def to_url(self, ttl=..., next_cursor=..., **options):  # -> str:
        """
        Creates a signed Search URL that can be used on the client side.

        :param ttl: The time to live in seconds.
        :param next_cursor: Starting position.
        :param options: Additional url delivery options.
        :return: The resulting search URL.
        """
        ...

    def endpoint(self, endpoint):  # -> Self:
        ...
